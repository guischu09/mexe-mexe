package engine

import (
	"fmt"
	"math/rand/v2"
	"time"
)

const TOTAL_DECK_SIZE uint64 = 104
const NO_SHUFFLE_SEED uint64 = 0
const UNIQUE_SHUFFLE_SEED uint64 = 1

type Deck struct {
	Cards []Card
	Size  int
	Seed  uint64
}

var TWO_OF_SPADES, _ = NewCard(TWO, SPADE, TWO_VALUE, TWO_SPADE_SYMBOL, BLACK)
var THREE_OF_SPADES, _ = NewCard(THREE, SPADE, THREE_VALUE, THREE_SPADE_SYMBOL, BLACK)
var FOUR_OF_SPADES, _ = NewCard(FOUR, SPADE, FOUR_VALUE, FOUR_SPADE_SYMBOL, BLACK)
var FIVE_OF_SPADES, _ = NewCard(FIVE, SPADE, FIVE_VALUE, FIVE_SPADE_SYMBOL, BLACK)
var SIX_OF_SPADES, _ = NewCard(SIX, SPADE, SIX_VALUE, SIX_SPADE_SYMBOL, BLACK)
var SEVEN_OF_SPADES, _ = NewCard(SEVEN, SPADE, SEVEN_VALUE, SEVEN_SPADE_SYMBOL, BLACK)
var EIGHT_OF_SPADES, _ = NewCard(EIGHT, SPADE, EIGHT_VALUE, EIGHT_SPADE_SYMBOL, BLACK)
var NINE_OF_SPADES, _ = NewCard(NINE, SPADE, NINE_VALUE, NINE_SPADE_SYMBOL, BLACK)
var TEN_OF_SPADES, _ = NewCard(TEN, SPADE, TEN_VALUE, TEN_SPADE_SYMBOL, BLACK)
var JACK_OF_SPADES, _ = NewCard(JACK, SPADE, JACK_VALUE, JACK_SPADE_SYMBOL, BLACK)
var QUEEN_OF_SPADES, _ = NewCard(QUEEN, SPADE, QUEEN_VALUE, QUEEN_SPADE_SYMBOL, BLACK)
var KING_OF_SPADES, _ = NewCard(KING, SPADE, KING_VALUE, KING_SPADE_SYMBOL, BLACK)
var ACE_OF_SPADES, _ = NewCard(ACE, SPADE, ACE_VALUE, ACE_SPADE_SYMBOL, BLACK)

var TWO_OF_DIAMONDS, _ = NewCard(TWO, DIAMOND, TWO_VALUE, TWO_DIAMOND_SYMBOL, RED)
var THREE_OF_DIAMONDS, _ = NewCard(THREE, DIAMOND, THREE_VALUE, THREE_DIAMOND_SYMBOL, RED)
var FOUR_OF_DIAMONDS, _ = NewCard(FOUR, DIAMOND, FOUR_VALUE, FOUR_DIAMOND_SYMBOL, RED)
var FIVE_OF_DIAMONDS, _ = NewCard(FIVE, DIAMOND, FIVE_VALUE, FIVE_DIAMOND_SYMBOL, RED)
var SIX_OF_DIAMONDS, _ = NewCard(SIX, DIAMOND, SIX_VALUE, SIX_DIAMOND_SYMBOL, RED)
var SEVEN_OF_DIAMONDS, _ = NewCard(SEVEN, DIAMOND, SEVEN_VALUE, SEVEN_DIAMOND_SYMBOL, RED)
var EIGHT_OF_DIAMONDS, _ = NewCard(EIGHT, DIAMOND, EIGHT_VALUE, EIGHT_DIAMOND_SYMBOL, RED)
var NINE_OF_DIAMONDS, _ = NewCard(NINE, DIAMOND, NINE_VALUE, NINE_DIAMOND_SYMBOL, RED)
var TEN_OF_DIAMONDS, _ = NewCard(TEN, DIAMOND, TEN_VALUE, TEN_DIAMOND_SYMBOL, RED)
var JACK_OF_DIAMONDS, _ = NewCard(JACK, DIAMOND, JACK_VALUE, JACK_DIAMOND_SYMBOL, RED)
var QUEEN_OF_DIAMONDS, _ = NewCard(QUEEN, DIAMOND, QUEEN_VALUE, QUEEN_DIAMOND_SYMBOL, RED)
var KING_OF_DIAMONDS, _ = NewCard(KING, DIAMOND, KING_VALUE, KING_DIAMOND_SYMBOL, RED)
var ACE_OF_DIAMONDS, _ = NewCard(ACE, DIAMOND, ACE_VALUE, ACE_DIAMOND_SYMBOL, RED)

var TWO_OF_HEARTS, _ = NewCard(TWO, HEART, TWO_VALUE, TWO_HEART_SYMBOL, RED)
var THREE_OF_HEARTS, _ = NewCard(THREE, HEART, THREE_VALUE, THREE_HEART_SYMBOL, RED)
var FOUR_OF_HEARTS, _ = NewCard(FOUR, HEART, FOUR_VALUE, FOUR_HEART_SYMBOL, RED)
var FIVE_OF_HEARTS, _ = NewCard(FIVE, HEART, FIVE_VALUE, FIVE_HEART_SYMBOL, RED)
var SIX_OF_HEARTS, _ = NewCard(SIX, HEART, SIX_VALUE, SIX_HEART_SYMBOL, RED)
var SEVEN_OF_HEARTS, _ = NewCard(SEVEN, HEART, SEVEN_VALUE, SEVEN_HEART_SYMBOL, RED)
var EIGHT_OF_HEARTS, _ = NewCard(EIGHT, HEART, EIGHT_VALUE, EIGHT_HEART_SYMBOL, RED)
var NINE_OF_HEARTS, _ = NewCard(NINE, HEART, NINE_VALUE, NINE_HEART_SYMBOL, RED)
var TEN_OF_HEARTS, _ = NewCard(TEN, HEART, TEN_VALUE, TEN_HEART_SYMBOL, RED)
var JACK_OF_HEARTS, _ = NewCard(JACK, HEART, JACK_VALUE, JACK_HEART_SYMBOL, RED)
var QUEEN_OF_HEARTS, _ = NewCard(QUEEN, HEART, QUEEN_VALUE, QUEEN_HEART_SYMBOL, RED)
var KING_OF_HEARTS, _ = NewCard(KING, HEART, KING_VALUE, KING_HEART_SYMBOL, RED)
var ACE_OF_HEARTS, _ = NewCard(ACE, HEART, ACE_VALUE, ACE_HEART_SYMBOL, RED)

var TWO_OF_CLUBS, _ = NewCard(TWO, CLUB, TWO_VALUE, TWO_CLUB_SYMBOL, BLACK)
var THREE_OF_CLUBS, _ = NewCard(THREE, CLUB, THREE_VALUE, THREE_CLUB_SYMBOL, BLACK)
var FOUR_OF_CLUBS, _ = NewCard(FOUR, CLUB, FOUR_VALUE, FOUR_CLUB_SYMBOL, BLACK)
var FIVE_OF_CLUBS, _ = NewCard(FIVE, CLUB, FIVE_VALUE, FIVE_CLUB_SYMBOL, BLACK)
var SIX_OF_CLUBS, _ = NewCard(SIX, CLUB, SIX_VALUE, SIX_CLUB_SYMBOL, BLACK)
var SEVEN_OF_CLUBS, _ = NewCard(SEVEN, CLUB, SEVEN_VALUE, SEVEN_CLUB_SYMBOL, BLACK)
var EIGHT_OF_CLUBS, _ = NewCard(EIGHT, CLUB, EIGHT_VALUE, EIGHT_CLUB_SYMBOL, BLACK)
var NINE_OF_CLUBS, _ = NewCard(NINE, CLUB, NINE_VALUE, NINE_CLUB_SYMBOL, BLACK)
var TEN_OF_CLUBS, _ = NewCard(TEN, CLUB, TEN_VALUE, TEN_CLUB_SYMBOL, BLACK)
var JACK_OF_CLUBS, _ = NewCard(JACK, CLUB, JACK_VALUE, JACK_CLUB_SYMBOL, BLACK)
var QUEEN_OF_CLUBS, _ = NewCard(QUEEN, CLUB, QUEEN_VALUE, QUEEN_CLUB_SYMBOL, BLACK)
var KING_OF_CLUBS, _ = NewCard(KING, CLUB, KING_VALUE, KING_CLUB_SYMBOL, BLACK)
var ACE_OF_CLUBS, _ = NewCard(ACE, CLUB, ACE_VALUE, ACE_CLUB_SYMBOL, BLACK)

func NewDeck(seed uint64) Deck {
	var cards []Card

	cards = append(cards, TWO_OF_SPADES, THREE_OF_SPADES, FOUR_OF_SPADES, FIVE_OF_SPADES, SIX_OF_SPADES, SEVEN_OF_SPADES, EIGHT_OF_SPADES, NINE_OF_SPADES, TEN_OF_SPADES, JACK_OF_SPADES, QUEEN_OF_SPADES, KING_OF_SPADES, ACE_OF_SPADES)
	cards = append(cards, TWO_OF_SPADES, THREE_OF_SPADES, FOUR_OF_SPADES, FIVE_OF_SPADES, SIX_OF_SPADES, SEVEN_OF_SPADES, EIGHT_OF_SPADES, NINE_OF_SPADES, TEN_OF_SPADES, JACK_OF_SPADES, QUEEN_OF_SPADES, KING_OF_SPADES, ACE_OF_SPADES)

	cards = append(cards, TWO_OF_DIAMONDS, THREE_OF_DIAMONDS, FOUR_OF_DIAMONDS, FIVE_OF_DIAMONDS, SIX_OF_DIAMONDS, SEVEN_OF_DIAMONDS, EIGHT_OF_DIAMONDS, NINE_OF_DIAMONDS, TEN_OF_DIAMONDS, JACK_OF_DIAMONDS, QUEEN_OF_DIAMONDS, KING_OF_DIAMONDS, ACE_OF_DIAMONDS)
	cards = append(cards, TWO_OF_DIAMONDS, THREE_OF_DIAMONDS, FOUR_OF_DIAMONDS, FIVE_OF_DIAMONDS, SIX_OF_DIAMONDS, SEVEN_OF_DIAMONDS, EIGHT_OF_DIAMONDS, NINE_OF_DIAMONDS, TEN_OF_DIAMONDS, JACK_OF_DIAMONDS, QUEEN_OF_DIAMONDS, KING_OF_DIAMONDS, ACE_OF_DIAMONDS)

	cards = append(cards, TWO_OF_HEARTS, THREE_OF_HEARTS, FOUR_OF_HEARTS, FIVE_OF_HEARTS, SIX_OF_HEARTS, SEVEN_OF_HEARTS, EIGHT_OF_HEARTS, NINE_OF_HEARTS, TEN_OF_HEARTS, JACK_OF_HEARTS, QUEEN_OF_HEARTS, KING_OF_HEARTS, ACE_OF_HEARTS)
	cards = append(cards, TWO_OF_HEARTS, THREE_OF_HEARTS, FOUR_OF_HEARTS, FIVE_OF_HEARTS, SIX_OF_HEARTS, SEVEN_OF_HEARTS, EIGHT_OF_HEARTS, NINE_OF_HEARTS, TEN_OF_HEARTS, JACK_OF_HEARTS, QUEEN_OF_HEARTS, KING_OF_HEARTS, ACE_OF_HEARTS)

	cards = append(cards, TWO_OF_CLUBS, THREE_OF_CLUBS, FOUR_OF_CLUBS, FIVE_OF_CLUBS, SIX_OF_CLUBS, SEVEN_OF_CLUBS, EIGHT_OF_CLUBS, NINE_OF_CLUBS, TEN_OF_CLUBS, JACK_OF_CLUBS, QUEEN_OF_CLUBS, KING_OF_CLUBS, ACE_OF_CLUBS)
	cards = append(cards, TWO_OF_CLUBS, THREE_OF_CLUBS, FOUR_OF_CLUBS, FIVE_OF_CLUBS, SIX_OF_CLUBS, SEVEN_OF_CLUBS, EIGHT_OF_CLUBS, NINE_OF_CLUBS, TEN_OF_CLUBS, JACK_OF_CLUBS, QUEEN_OF_CLUBS, KING_OF_CLUBS, ACE_OF_CLUBS)

	if seed == NO_SHUFFLE_SEED {
		gameDeck := Deck{
			Cards: cards,
			Size:  len(cards),
			Seed:  seed,
		}
		return gameDeck
	}

	if seed == UNIQUE_SHUFFLE_SEED {
		seedTime := uint64(time.Now().UnixNano())

		pcgSource := rand.NewPCG(seedTime, seedTime)
		rng := rand.New(pcgSource)

		rng.Shuffle(len(cards), func(i, j int) {
			cards[i], cards[j] = cards[j], cards[i]
		})
		gameDeck := Deck{
			Cards: cards,
			Size:  len(cards),
			Seed:  seedTime,
		}
		return gameDeck
	}

	pcgSource := rand.NewPCG(seed, seed)
	rng := rand.New(pcgSource)
	rng.Shuffle(len(cards), func(i, j int) {
		cards[i], cards[j] = cards[j], cards[i]
	})

	gameDeck := Deck{
		Cards: cards,
		Size:  len(cards),
		Seed:  seed,
	}

	return gameDeck
}

func (g *Deck) Print() {
	for i := 0; i < len(g.Cards); i++ {
		fmt.Println(g.Cards[i].Name + " " + string(g.Cards[i].Symbol))
	}
	fmt.Println("Size: ", g.Size)
}

func (g *Deck) PrintSize() {
	fmt.Println("Size: ", g.Size)
}

func (g *Deck) updateSize() {
	g.Size = len(g.Cards)
}

func (g *Deck) Contains(card Card) bool {
	for i := 0; i < len(g.Cards); i++ {
		if g.Cards[i].Name == card.Name {
			return true
		}
	}
	return false
}

func (g *Deck) DrawCard() *Card {
	card := g.Cards[0]
	g.Cards = g.Cards[1:]
	g.updateSize()
	return &card
}

func (g *Deck) RemoveCard(card Card) bool {
	for i := 0; i < len(g.Cards); i++ {
		if g.Cards[i].Name == card.Name {
			g.Cards = append(g.Cards[:i], g.Cards[i+1:]...)
			g.updateSize()
			return true
		}
	}
	fmt.Println("Card not found in the deck")
	return false
}
